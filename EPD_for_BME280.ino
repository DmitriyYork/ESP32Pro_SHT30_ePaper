
#include <LOLIN_EPD.h>
#include <Adafruit_GFX.h>
//#include <Wire.h>           // SHTSensor
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

Adafruit_BME280 bme; // I2C
unsigned long delayTime;

#define SEALEVELPRESSURE_HPA (1013.25)
const unsigned char I_Zero[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0xff, 0xff, 0x87, 0xe1, 0xff, 0xff, 0x83, 
  0xe1, 0xff, 0xff, 0x83, 0xe1, 0xff, 0xff, 0x87, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char I_One[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x1f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 0xfe, 0x1f, 0xff, 0xff, 
  0xfe, 0x1f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char I_Two[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x0f, 0xff, 0x87, 0xf8, 0x0f, 0xfc, 0x07, 0xf0, 0x0f, 0xf8, 0x07, 0xe0, 0x0f, 0xe0, 0x07, 
  0xe0, 0x0f, 0xc0, 0x07, 0xe0, 0x1f, 0x80, 0x07, 0xe0, 0xff, 0x00, 0x07, 0xe1, 0xfe, 0x01, 0x07, 
  0xe1, 0xfc, 0x03, 0x07, 0xe1, 0xf8, 0x07, 0x07, 0xe0, 0x00, 0x0f, 0x07, 0xe0, 0x00, 0x1f, 0x07, 
  0xe0, 0x00, 0x3f, 0x07, 0xf0, 0x00, 0x7f, 0x07, 0xf0, 0x00, 0xff, 0x07, 0xfc, 0x03, 0xff, 0x07, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char I_Tree[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x1f, 0xf0, 0x3f, 0xf8, 0x1f, 0xf0, 0x1f, 0xf0, 0x1f, 0xf0, 0x0f, 0xe0, 0x1f, 0xf0, 0x07, 
  0xe0, 0x1f, 0xf0, 0x07, 0xe0, 0x7c, 0x3e, 0x07, 0xe1, 0xf8, 0x3f, 0x87, 0xe1, 0xf8, 0x3f, 0x87, 
  0xe1, 0xf8, 0x3f, 0x87, 0xe0, 0xf0, 0x1f, 0x87, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xf0, 0x03, 0x00, 0x0f, 0xf8, 0x07, 0x80, 0x1f, 0xfe, 0x1f, 0xc0, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char I_Four[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0x80, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xe0, 0x00, 0xff, 
  0xff, 0xc0, 0x20, 0xff, 0xff, 0x00, 0xe0, 0xff, 0xfc, 0x03, 0xe0, 0xff, 0xf0, 0x07, 0xe0, 0xff, 
  0xe0, 0x1f, 0xe0, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xe0, 0xff, 
  0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char I_Five[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xe0, 0x78, 0x7f, 0xe0, 0x00, 0x38, 0x1f, 0xe0, 0x00, 0x38, 0x0f, 0xe0, 0x00, 0x38, 0x07, 
  0xe0, 0x00, 0x38, 0x07, 0xe0, 0xf0, 0x78, 0x07, 0xe0, 0xf0, 0xff, 0x07, 0xe0, 0xf1, 0xff, 0x87, 
  0xe0, 0xe1, 0xff, 0x87, 0xe0, 0xe0, 0xff, 0x87, 0xe0, 0xe0, 0x3c, 0x07, 0xe0, 0xe0, 0x00, 0x07, 
  0xe0, 0xf0, 0x00, 0x07, 0xe0, 0xf0, 0x00, 0x0f, 0xe0, 0xf8, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char I_Six[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0xf8, 0x7f, 0x07, 0xe1, 0xf8, 0xff, 0x87, 
  0xe1, 0xf0, 0xff, 0x87, 0xe1, 0xf0, 0x7f, 0x87, 0xe0, 0x70, 0x3e, 0x07, 0xe0, 0x70, 0x00, 0x07, 
  0xe0, 0x70, 0x00, 0x07, 0xf0, 0x78, 0x00, 0x0f, 0xf0, 0x78, 0x00, 0x1f, 0xfc, 0x7e, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff  
};

const unsigned char I_Seven[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xe0, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0xff, 0xe0, 0xff, 0xff, 0x87, 
  0xe0, 0xff, 0xfc, 0x07, 0xe0, 0xff, 0xc0, 0x07, 0xe0, 0xfe, 0x00, 0x07, 0xe0, 0xf8, 0x00, 0x07, 
  0xe0, 0xe0, 0x00, 0x07, 0xe0, 0x80, 0x00, 0x0f, 0xe0, 0x00, 0x03, 0xff, 0xe0, 0x00, 0x7f, 0xff, 
  0xe0, 0x03, 0xff, 0xff, 0xe0, 0x0f, 0xff, 0xff, 0xe0, 0x3f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff  
};

const unsigned char I_Eight[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfc, 0x0f, 0x80, 0x3f, 0xf8, 0x03, 0x00, 0x1f, 0xf0, 0x02, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xe0, 0x60, 0x1e, 0x07, 0xe1, 0xf8, 0x3f, 0x87, 0xe1, 0xf8, 0x7f, 0x87, 
  0xe1, 0xf8, 0x7f, 0x87, 0xe0, 0xf0, 0x3f, 0x87, 0xe0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xf0, 0x03, 0x00, 0x0f, 0xf8, 0x07, 0x80, 0x1f, 0xfe, 0x0f, 0xc0, 0x7f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const unsigned char I_Nine[128] PROGMEM = {
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xfe, 0x00, 0xfe, 0xff, 0xf8, 0x00, 0x3e, 0x1f, 0xf0, 0x00, 0x1e, 0x0f, 0xe0, 0x00, 0x1e, 0x07, 
  0xe0, 0x00, 0x0e, 0x07, 0xe0, 0x00, 0x0e, 0x07, 0xe0, 0xfe, 0x0f, 0x07, 0xe1, 0xff, 0x0f, 0x87, 
  0xe1, 0xff, 0x0f, 0x87, 0xe1, 0xfe, 0x1f, 0x87, 0xe0, 0x7c, 0x0e, 0x07, 0xe0, 0x00, 0x00, 0x07, 
  0xe0, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x3f, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff 
};

const unsigned char  *Number[]={I_Zero, I_One, I_Two, I_Tree, I_Four, I_Five, I_Six, I_Seven, I_Eight, I_Nine};

/*D32 Pro*/
#define EPD_CS 14
#define EPD_DC 27
#define EPD_RST 33     // can set to -1 and share with microcontroller Reset!
#define EPD_BUSY -1    // can set to -1 to not use a pin (will wait a fixed delay)

LOLIN_IL3897 EPD(250, 122, EPD_DC, EPD_RST, EPD_CS, EPD_BUSY); //hardware SPI
// int width, int height, int8_t DC, int8_t RST, int8_t CS, int8_t BUSY
//SHTSensor sht;    // Temperatursensor or sht(SHTSensor::SHT3X);

void setup()
{
  Serial.begin(115200);
  //Wire.begin();
   EPD.begin();
    
    unsigned status;

    status = bme.begin();  
   // EPD.clearBuffer();
   // EPD.fillScreen(EPD_WHITE);
   // delayTime = 5000;
  

  EPD.clearBuffer();
//  EPD.setTextWrap(true);
  EPD.setTextSize(3);
  EPD.setTextColor(EPD_BLACK);
  EPD.setCursor(8, 16);    // 10 to the right and 18 down 
  EPD.print("T=:");
  EPD.setCursor(116, 16);   // 177 to the right and 18 down
  EPD.print(".    C");
  EPD.setCursor(8, 56);    // 10 to the right and 58 down 
  EPD.print("H=:");
  EPD.setCursor(116, 56);   // 177 to the right and 58 down
  EPD.print(".    %");
  EPD.setCursor(8, 95);    // 10 to the right and 58 down 
  EPD.print("P=:");
  EPD.setCursor(128, 95);   // 177 to the right and 58 down
 // EPD.setTextSize(2);
  EPD.print(" .  HG");

  EPD.partInit();
  delay(100);
}

void loop()
{
 
      EPD.clearBuffer();
      float temp = bme.readTemperature();
 //     Serial.print("  T:  ");
 //     Serial.println(temp, 2);      
      int temp_zehner = static_cast<int>(temp/10);
      int temp_einer  = static_cast<int>(temp - temp_zehner*10);
      int temp_zehntel = static_cast<int>((temp - static_cast<int>(temp)) * 10);
      int temp_dzehntel = static_cast<int>(((temp - static_cast<int>(temp)) * 100)-temp_zehntel*10);
      EPD.partDisplay(15, 190, Number[temp_zehner], 32, 32);  // 10 down & 125 right
//    EPD.partUpdate();
      EPD.partDisplay(15, 160, Number[temp_einer], 32, 32);
      EPD.partUpdate();
      EPD.partDisplay(15, 120, Number[temp_zehntel], 32, 32);
      EPD.partUpdate();
      EPD.partDisplay(15, 90, Number[temp_dzehntel], 32, 32);
      EPD.partUpdate();

      float humi = bme.readHumidity();
 //     Serial.print("  H:  ");
 //     Serial.println(humi, 2);
      int humi_zehner = static_cast<int>(humi/10);
      int humi_einer  = static_cast<int>(humi - humi_zehner*10);
      int humi_zehntel = static_cast<int>((humi - static_cast<int>(humi)) * 10);
      int humi_dzehntel = static_cast<int>(((humi - static_cast<int>(humi)) * 100) - humi_zehntel*10);
      EPD.partDisplay(50, 190, Number[humi_zehner], 32, 32);
      EPD.partUpdate();
      EPD.partDisplay(50, 160, Number[humi_einer], 32, 32);
      EPD.partUpdate();     
      EPD.partDisplay(50, 120, Number[humi_zehntel], 32, 32);
      EPD.partUpdate();
      EPD.partDisplay(50, 90, Number[humi_dzehntel], 32, 32);
      EPD.partUpdate();

      float pres = bme.readPressure() / 130.0F;
  //    Serial.print("  P:  ");
  //    Serial.println(Press);
      int pres_zehner = static_cast<int>(pres/100);
      int pres_einer  = static_cast<int>((pres - pres_zehner*100)/10);
      int pres_zehntel = static_cast<int>(pres - pres_zehner*100 - pres_einer*10);
      int pres_dzehntel = static_cast<int>(((pres - static_cast<int>(pres)) * 10) - pres_zehntel);
      EPD.partDisplay(90, 190, Number[pres_zehner], 32, 32);
      EPD.partUpdate();
      EPD.partDisplay(90, 160, Number[pres_einer], 32, 32);
      EPD.partUpdate();     
      EPD.partDisplay(90, 130, Number[pres_zehntel], 32, 32);
      EPD.partUpdate();
      EPD.partDisplay(90, 90, Number[pres_dzehntel], 32, 32);
      EPD.partUpdate();
  delay(1000);
}
